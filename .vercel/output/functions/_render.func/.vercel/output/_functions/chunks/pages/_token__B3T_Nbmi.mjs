/* empty css                        */
import { c as createAstro, d as createComponent, r as renderTemplate } from '../astro_ogGt8jf6.mjs';
import 'kleur/colors';
import 'clsx';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$Astro = createAstro("https://www.swifly.app");
const $$token = createComponent(async ($$result, $$props, $$slots) => {
  const Astro2 = $$result.createAstro($$Astro, $$props, $$slots);
  Astro2.self = $$token;
  return renderTemplate(_a || (_a = __template(['<!-- ---\nimport type { GetStaticPaths } from "astro";\nimport type { APIContext } from "astro";\nimport { isWithinExpirationDate } from "oslo";\nimport { hash } from "@node-rs/argon2";\nimport { sha256 } from "oslo/crypto";\nimport { encodeHex } from "oslo/encoding";\nimport { db, eq, Users, PasswordReset } from "astro:db";\nimport { lucia } from "src/auth";\nexport const prerender = true;\n\nexport async function getStaticPaths() {\n  const response = await fetch("www.swifly.app/forgot/");\n  const tokens = await response.json();\n  return tokens.map((token) => {\n    return {\n      params: { token: token.token },\n    };\n  });\n}\n\nconst { tokenId } = Astro.params;\nconst tokenResponse = await fetch(`www.swifly.app/forgot/${token}`);\nconst token = await tokenResponse.json();\n---\n\n<div>\n  Est\xE1s en la p\xE1gina: {tokenId}\n</div>\n\n<!-- \n  export async function GET(context: APIContext): Promise<Response> {\n  const token = context.params.verificationToken;\n\n  response html\n  const html = `\n    ---\n    import BaseLayout from "../../../layouts/BaseLayout.astro";\n    import Hero from "../../../components/Hero.astro";\n    import Icon from "@/components/Icon.astro";\n    ---\n    <!DOCTYPE html>\n    <html lang="en">\n    <head>\n      <meta charset="UTF-8">\n      <meta name="viewport" content="width=device-width, initial-scale=1.0">\n      <title>Restablecer Contrase\xF1a | Swifly</title>\n      <link rel="stylesheet" href="/path/to/your/css/styles.css">\n    </head>\n    <body>\n      <div id="app">\n        <BaseLayout title="Restablecer contrase\xF1a | Swifly" description="Formulario para restablecer la contrase\xF1a">\n          <div class="stack gap-20">\n            <main class="wrapper stack gap-8">\n              <Hero title="Restablecer contrase\xF1a" tagline="" align="start" />\n              <div class="flex justify-center">\n                <section class="box input flex justify-center items-center h-fit rounded-none w-full max-w-lg">\n                  <div class="login-logo flex items-center justify-center p-2 bg-neutral-50 mb-4 border border-purple-500 border-opacity-50 rounded-full">\n                    <Icon icon="swifly" color="var(--accent-regular)" size="2.5em" gradient />\n                  </div>\n                  <form method="POST" id="confirmReset" action="/api/reset-password/${token}" class="flex flex-col justify-center gap-8 py-12 items-center w-full">\n                    <label for="newPassword" class="text-xl">Nueva contrase\xF1a</label>\n                    <input type="password" name="newPassword" id="newPassword" class="bg-opacity-50 px-8 py-4 rounded-xl border border-x-[var(--gray-800)] border-y-[var(--gray-600)] focus:outline-none focus:border-purple-600 bg-[var(--gray-900)]" />\n                    <span id="newPasswordError" class="error"></span>\n                    <label for="confirmNewPassword" class="text-xl">Confirmar nueva contrase\xF1a</label>\n                    <input type="password" name="confirmNewPassword" id="confirmNewPassword" class="bg-opacity-50 px-8 py-4 rounded-xl border border-x-[var(--gray-800)] border-y-[var(--gray-600)] focus:outline-none focus:border-purple-600 bg-[var(--gray-900)]" />\n                    <span id="confirmNewPasswordError" class="error"></span>\n                    <input type="submit" class="shadow-xl" value="Cambiar contrase\xF1a" id="reset" />\n                  </form>\n                </section>\n              </div>\n            </main>\n          </div>\n        </BaseLayout>\n      </div>\n      <script src="/path/to/your/js/validations.js"><\/script>\n    </body>\n    </html>\n  `;\n\n  return new Response(html, {\n    headers: {\n      "Referrer-Policy": "no-referrer",\n      "Content-Type": "text/html"\n    }\n  });\n}\n\nexport async function POST(context: APIContext): Promise<Response> {\n  const token = context.params.token;\n  const formData = await context.request.formData();\n  const password = formData.get(\'newPassword\') as string;\n  const confirmPassword = formData.get(\'confirmNewPassword\') as string;\n\n  if (!password || password.length < 8 || password !== confirmPassword) {\n    return new Response("Invalid password", { status: 400 });\n  }\n\n  const tokenHash = encodeHex(await sha256(new TextEncoder().encode(token)));\n  const tokenRecord = await db.select().from(PasswordReset).where(eq(PasswordReset.token_hash, tokenHash)).execute();\n\n  if (tokenRecord.length === 0 || !isWithinExpirationDate(tokenRecord[0].expires_at)) {\n    return new Response("Invalid or expired token", { status: 400 });\n  }\n\n  const userId = tokenRecord[0].user_id;\n\n  await db.delete(PasswordReset).where(eq(PasswordReset.token_hash, tokenHash)).execute();\n  await lucia.invalidateUserSessions(userId);\n\n  const passwordHash = await hash(password, {\n    memoryCost: 19456,\n    timeCost: 2,\n    outputLen: 32,\n    parallelism: 1\n  });\n\n  await db.update(Users).set({ password: passwordHash }).where(eq(Users.id, userId)).execute();\n\n  const session = lucia.createSession(userId, {});\n  const sessionCookie = await lucia.createSessionCookie((await session).id);\n\n  return new Response(null, {\n    status: 302,\n    headers: {\n      Location: "/",\n      "Set-Cookie": sessionCookie.serialize(),\n      "Referrer-Policy": "no-referrer"\n    }\n  });\n}\n\nimport type { APIContext } from "astro";\n\nexport async function GET(context: APIContext) {\n  const token = context.params.token;\n\n  Verificar si el token est\xE1 presente en la URL\n  if (!token) {\n    return new Response("Token not found in URL", { status: 400 });\n  }\n\n  Tu l\xF3gica para manejar el token aqu\xED\n\n  return new Response(`Token: ${token}`);\n}\n\n  -->'], ['<!-- ---\nimport type { GetStaticPaths } from "astro";\nimport type { APIContext } from "astro";\nimport { isWithinExpirationDate } from "oslo";\nimport { hash } from "@node-rs/argon2";\nimport { sha256 } from "oslo/crypto";\nimport { encodeHex } from "oslo/encoding";\nimport { db, eq, Users, PasswordReset } from "astro:db";\nimport { lucia } from "src/auth";\nexport const prerender = true;\n\nexport async function getStaticPaths() {\n  const response = await fetch("www.swifly.app/forgot/");\n  const tokens = await response.json();\n  return tokens.map((token) => {\n    return {\n      params: { token: token.token },\n    };\n  });\n}\n\nconst { tokenId } = Astro.params;\nconst tokenResponse = await fetch(\\`www.swifly.app/forgot/\\${token}\\`);\nconst token = await tokenResponse.json();\n---\n\n<div>\n  Est\xE1s en la p\xE1gina: {tokenId}\n</div>\n\n<!-- \n  export async function GET(context: APIContext): Promise<Response> {\n  const token = context.params.verificationToken;\n\n  response html\n  const html = \\`\n    ---\n    import BaseLayout from "../../../layouts/BaseLayout.astro";\n    import Hero from "../../../components/Hero.astro";\n    import Icon from "@/components/Icon.astro";\n    ---\n    <!DOCTYPE html>\n    <html lang="en">\n    <head>\n      <meta charset="UTF-8">\n      <meta name="viewport" content="width=device-width, initial-scale=1.0">\n      <title>Restablecer Contrase\xF1a | Swifly</title>\n      <link rel="stylesheet" href="/path/to/your/css/styles.css">\n    </head>\n    <body>\n      <div id="app">\n        <BaseLayout title="Restablecer contrase\xF1a | Swifly" description="Formulario para restablecer la contrase\xF1a">\n          <div class="stack gap-20">\n            <main class="wrapper stack gap-8">\n              <Hero title="Restablecer contrase\xF1a" tagline="" align="start" />\n              <div class="flex justify-center">\n                <section class="box input flex justify-center items-center h-fit rounded-none w-full max-w-lg">\n                  <div class="login-logo flex items-center justify-center p-2 bg-neutral-50 mb-4 border border-purple-500 border-opacity-50 rounded-full">\n                    <Icon icon="swifly" color="var(--accent-regular)" size="2.5em" gradient />\n                  </div>\n                  <form method="POST" id="confirmReset" action="/api/reset-password/\\${token}" class="flex flex-col justify-center gap-8 py-12 items-center w-full">\n                    <label for="newPassword" class="text-xl">Nueva contrase\xF1a</label>\n                    <input type="password" name="newPassword" id="newPassword" class="bg-opacity-50 px-8 py-4 rounded-xl border border-x-[var(--gray-800)] border-y-[var(--gray-600)] focus:outline-none focus:border-purple-600 bg-[var(--gray-900)]" />\n                    <span id="newPasswordError" class="error"></span>\n                    <label for="confirmNewPassword" class="text-xl">Confirmar nueva contrase\xF1a</label>\n                    <input type="password" name="confirmNewPassword" id="confirmNewPassword" class="bg-opacity-50 px-8 py-4 rounded-xl border border-x-[var(--gray-800)] border-y-[var(--gray-600)] focus:outline-none focus:border-purple-600 bg-[var(--gray-900)]" />\n                    <span id="confirmNewPasswordError" class="error"></span>\n                    <input type="submit" class="shadow-xl" value="Cambiar contrase\xF1a" id="reset" />\n                  </form>\n                </section>\n              </div>\n            </main>\n          </div>\n        </BaseLayout>\n      </div>\n      <script src="/path/to/your/js/validations.js"><\/script>\n    </body>\n    </html>\n  \\`;\n\n  return new Response(html, {\n    headers: {\n      "Referrer-Policy": "no-referrer",\n      "Content-Type": "text/html"\n    }\n  });\n}\n\nexport async function POST(context: APIContext): Promise<Response> {\n  const token = context.params.token;\n  const formData = await context.request.formData();\n  const password = formData.get(\'newPassword\') as string;\n  const confirmPassword = formData.get(\'confirmNewPassword\') as string;\n\n  if (!password || password.length < 8 || password !== confirmPassword) {\n    return new Response("Invalid password", { status: 400 });\n  }\n\n  const tokenHash = encodeHex(await sha256(new TextEncoder().encode(token)));\n  const tokenRecord = await db.select().from(PasswordReset).where(eq(PasswordReset.token_hash, tokenHash)).execute();\n\n  if (tokenRecord.length === 0 || !isWithinExpirationDate(tokenRecord[0].expires_at)) {\n    return new Response("Invalid or expired token", { status: 400 });\n  }\n\n  const userId = tokenRecord[0].user_id;\n\n  await db.delete(PasswordReset).where(eq(PasswordReset.token_hash, tokenHash)).execute();\n  await lucia.invalidateUserSessions(userId);\n\n  const passwordHash = await hash(password, {\n    memoryCost: 19456,\n    timeCost: 2,\n    outputLen: 32,\n    parallelism: 1\n  });\n\n  await db.update(Users).set({ password: passwordHash }).where(eq(Users.id, userId)).execute();\n\n  const session = lucia.createSession(userId, {});\n  const sessionCookie = await lucia.createSessionCookie((await session).id);\n\n  return new Response(null, {\n    status: 302,\n    headers: {\n      Location: "/",\n      "Set-Cookie": sessionCookie.serialize(),\n      "Referrer-Policy": "no-referrer"\n    }\n  });\n}\n\nimport type { APIContext } from "astro";\n\nexport async function GET(context: APIContext) {\n  const token = context.params.token;\n\n  Verificar si el token est\xE1 presente en la URL\n  if (!token) {\n    return new Response("Token not found in URL", { status: 400 });\n  }\n\n  Tu l\xF3gica para manejar el token aqu\xED\n\n  return new Response(\\`Token: \\${token}\\`);\n}\n\n  -->'])));
}, "C:/Users/Sandra/Desktop/layout/src/pages/api/reset-password/[token].astro", void 0);

const $$file = "C:/Users/Sandra/Desktop/layout/src/pages/api/reset-password/[token].astro";
const $$url = "/api/reset-password/[token]";

export { $$token as default, $$file as file, $$url as url };
