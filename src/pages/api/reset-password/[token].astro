<!-- ---
import type { GetStaticPaths } from "astro";
import type { APIContext } from "astro";
import { isWithinExpirationDate } from "oslo";
import { hash } from "@node-rs/argon2";
import { sha256 } from "oslo/crypto";
import { encodeHex } from "oslo/encoding";
import { db, eq, Users, PasswordReset } from "astro:db";
import { lucia } from "src/auth";
export const prerender = true;

export async function getStaticPaths() {
  const response = await fetch("www.swifly.app/forgot/");
  const tokens = await response.json();
  return tokens.map((token) => {
    return {
      params: { token: token.token },
    };
  });
}

const { tokenId } = Astro.params;
const tokenResponse = await fetch(`www.swifly.app/forgot/${token}`);
const token = await tokenResponse.json();
---

<div>
  Estás en la página: {tokenId}
</div>

<!-- 
  export async function GET(context: APIContext): Promise<Response> {
  const token = context.params.verificationToken;

  response html
  const html = `
    ---
    import BaseLayout from "../../../layouts/BaseLayout.astro";
    import Hero from "../../../components/Hero.astro";
    import Icon from "@/components/Icon.astro";
    ---
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Restablecer Contraseña | Swifly</title>
      <link rel="stylesheet" href="/path/to/your/css/styles.css">
    </head>
    <body>
      <div id="app">
        <BaseLayout title="Restablecer contraseña | Swifly" description="Formulario para restablecer la contraseña">
          <div class="stack gap-20">
            <main class="wrapper stack gap-8">
              <Hero title="Restablecer contraseña" tagline="" align="start" />
              <div class="flex justify-center">
                <section class="box input flex justify-center items-center h-fit rounded-none w-full max-w-lg">
                  <div class="login-logo flex items-center justify-center p-2 bg-neutral-50 mb-4 border border-purple-500 border-opacity-50 rounded-full">
                    <Icon icon="swifly" color="var(--accent-regular)" size="2.5em" gradient />
                  </div>
                  <form method="POST" id="confirmReset" action="/api/reset-password/${token}" class="flex flex-col justify-center gap-8 py-12 items-center w-full">
                    <label for="newPassword" class="text-xl">Nueva contraseña</label>
                    <input type="password" name="newPassword" id="newPassword" class="bg-opacity-50 px-8 py-4 rounded-xl border border-x-[var(--gray-800)] border-y-[var(--gray-600)] focus:outline-none focus:border-purple-600 bg-[var(--gray-900)]" />
                    <span id="newPasswordError" class="error"></span>
                    <label for="confirmNewPassword" class="text-xl">Confirmar nueva contraseña</label>
                    <input type="password" name="confirmNewPassword" id="confirmNewPassword" class="bg-opacity-50 px-8 py-4 rounded-xl border border-x-[var(--gray-800)] border-y-[var(--gray-600)] focus:outline-none focus:border-purple-600 bg-[var(--gray-900)]" />
                    <span id="confirmNewPasswordError" class="error"></span>
                    <input type="submit" class="shadow-xl" value="Cambiar contraseña" id="reset" />
                  </form>
                </section>
              </div>
            </main>
          </div>
        </BaseLayout>
      </div>
      <script src="/path/to/your/js/validations.js"></script>
    </body>
    </html>
  `;

  return new Response(html, {
    headers: {
      "Referrer-Policy": "no-referrer",
      "Content-Type": "text/html"
    }
  });
}

export async function POST(context: APIContext): Promise<Response> {
  const token = context.params.token;
  const formData = await context.request.formData();
  const password = formData.get('newPassword') as string;
  const confirmPassword = formData.get('confirmNewPassword') as string;

  if (!password || password.length < 8 || password !== confirmPassword) {
    return new Response("Invalid password", { status: 400 });
  }

  const tokenHash = encodeHex(await sha256(new TextEncoder().encode(token)));
  const tokenRecord = await db.select().from(PasswordReset).where(eq(PasswordReset.token_hash, tokenHash)).execute();

  if (tokenRecord.length === 0 || !isWithinExpirationDate(tokenRecord[0].expires_at)) {
    return new Response("Invalid or expired token", { status: 400 });
  }

  const userId = tokenRecord[0].user_id;

  await db.delete(PasswordReset).where(eq(PasswordReset.token_hash, tokenHash)).execute();
  await lucia.invalidateUserSessions(userId);

  const passwordHash = await hash(password, {
    memoryCost: 19456,
    timeCost: 2,
    outputLen: 32,
    parallelism: 1
  });

  await db.update(Users).set({ password: passwordHash }).where(eq(Users.id, userId)).execute();

  const session = lucia.createSession(userId, {});
  const sessionCookie = await lucia.createSessionCookie((await session).id);

  return new Response(null, {
    status: 302,
    headers: {
      Location: "/",
      "Set-Cookie": sessionCookie.serialize(),
      "Referrer-Policy": "no-referrer"
    }
  });
}

import type { APIContext } from "astro";

export async function GET(context: APIContext) {
  const token = context.params.token;

  Verificar si el token está presente en la URL
  if (!token) {
    return new Response("Token not found in URL", { status: 400 });
  }

  Tu lógica para manejar el token aquí

  return new Response(`Token: ${token}`);
}

  -->
