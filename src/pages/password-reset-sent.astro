---
import BaseLayout from "../layouts/BaseLayout.astro";
import Hero from "../components/Hero.astro";
export const prerender = false;
---

<BaseLayout
  title=" Restablecer contraseña | Swifly"
  description="Éxito en el envío de correo electrónico para cambiar la contraseña"
>
  <div class="stack gap-20">
    <main class="wrapper stack gap-8">
      <Hero
        title="Restablecer contraseña"
        tagline="¡Estás más cerca de conseguirlo!"
        align="start"
      />
      <div class="flex justify-center">
        <section
          class="box input flex justify-center items-center h-fit rounded-none w-full max-w-lg"
        >
          <div
            class="reset-success flex flex-col gap-6 justify-center items-start rounded-lg w-full"
          >
            <strong class="text-lg text-green-500">✨ ¡Enhorabuena! ✨</strong>
            <span
              >Se ha enviado el correo electrónico de recuperación de contraseña
              correspondiente a la cuenta indicada.</span
            >
            <em class="text-sm"
              >Revisa la bandeja de entrada y sigue los pasos correspondientes
              para recuperar tu cuenta.</em
            >
            <a href="/">Volver a inicio</a>
          </div>
        </section>
      </div>
      <!-- <div class="stack gap-20">
    <main class="wrapper stack gap-8">
      <Hero title="Restablecer contraseña" tagline="" align="start" />
      <div class="flex justify-center">
        <section
          class="box input flex justify-center items-center h-fit rounded-none w-full max-w-lg"
        >
          <div
            class="login-logo flex items-center justify-center p-2 bg-neutral-50 mb-4 border border-purple-500 border-opacity-50 rounded-full"
          >
            <Icon
              icon="swifly"
              color="var(--accent-regular)"
              size="2.5em"
              gradient
            />
          </div>
          <form
            method="POST"
            id="confirmReset"
            action="/api/reset"
            class="flex flex-col justify-center gap-8 py-12 items-center w-full"
          >
            <label for="newPassword" class="text-xl">Nueva contraseña</label>
            <input
              type="password"
              name="newPassword"
              id="newPassword"
              class="bg-opacity-50 px-8 py-4 rounded-xl border border-x-[var(--gray-800)] border-y-[var(--gray-600)] focus:outline-none focus:border-purple-600 bg-[var(--gray-900)]"
            />
            <span id="newPasswordError" class="error"></span>
            <label for="confirmNewPassword" class="text-xl"
              >Confirmar nueva contraseña</label
            >
            <input
              type="password"
              name="confirmNewPassword"
              id="confirmNewPassword"
              class="bg-opacity-50 px-8 py-4 rounded-xl border border-x-[var(--gray-800)] border-y-[var(--gray-600)] focus:outline-none focus:border-purple-600 bg-[var(--gray-900)]"
            />
            <span id="confirmNewPasswordError" class="error"></span>
            <input
              type="submit"
              class="shadow-xl"
              value="Cambiar contraseña"
              id="reset"
            />
          </form>
        </section>
      </div>
    </main>
  </div> -->
    </main>

    <script>
      const validations = {
        newPassword: (value) => {
          if (!value) return "New password is required";
          if (
            value.length < 8 ||
            !/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/.test(value)
          )
            // return "Password must be a valid data entry";
            return "Introduce una contraseña que contenga al menos 8 caracteres, una letra mayúscula, una letra minúscula y un número.";
          return "";
        },
        confirmNewPassword: (value) => {
          // if (!value) return "Confirm new password is required";
          if (!value) return "Confirma tu nueva contraseña";
          if (
            value.length < 8 ||
            !/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/.test(value)
          )
            // return "Password must be a valid data entry";
            return "Introduce una contraseña que contenga al menos 8 caracteres, una letra mayúscula, una letra minúscula y un número.";
          return "";
        },
      };
      const error = ["bg-red-400", "border-y-red-400", "border-x-red-300"];
      const showError = (input, message) => {
        const errorSpan = document.getElementById(input.id + "Error");
        errorSpan.textContent = message;
        input.classList.add(...error);
      };

      const clearError = (input) => {
        const errorSpan = document.getElementById(input.id + "Error");
        errorSpan.textContent = "";
        input.classList.remove(...error);
      };

      const addBlurEvent = (input, validation) => {
        input.addEventListener("blur", (event) => {
          const message = validation(event.target.value);
          if (message) {
            showError(event.target, message);
          } else {
            clearError(event.target);
          }
        });
      };

      const newPassword = document.getElementById("newPassword");
      const confirmNewPassword = document.getElementById("confirmNewPassword");

      addBlurEvent(newPassword, validations.newPassword);
      addBlurEvent(confirmNewPassword, validations.confirmNewPassword);
    </script>

    <style>
      form span {
        @apply text-center text-red-500 my-2 text-balance w-full max-w-72;
      }

      .login-logo {
        box-shadow: var(--shadow-md);
        background: radial-gradient(var(--gray-900), var(--gray-900) 150%);
      }

      .box {
        border: 1px solid var(--gray-800);
        border-radius: 0.75rem;
        padding: 1.5rem;
        background-color: var(--gray-999_40);
        box-shadow: var(--shadow-sm);
      }

      .input {
        display: flex;
        flex-direction: column;
      }

      #reset {
        color: white;
        cursor: pointer;
        padding-left: 2rem;
        padding-right: 2rem;
        padding-top: 1rem;
        padding-bottom: 1rem;
        margin-top: 2rem;
        border-radius: 9999px;
        border-width: 1px;
        --tw-border-opacity: 1;
        background-color: rgb(89 28 135 / var(--tw-border-opacity));
        border-left-color: rgb(192 132 252 / var(--tw-border-opacity));
        border-right-color: rgb(192 132 252 / var(--tw-border-opacity));
        border-top-color: rgb(168 85 247 / var(--tw-border-opacity));
        border-bottom-color: rgb(168 85 247 / var(--tw-border-opacity));
      }

      #login:hover {
        --tw-bg-opacity: 1;
        background-color: rgb(107 33 168 / var(--tw-bg-opacity));
      }

      .skills h2 {
        font-size: var(--text-lg);
      }

      .skills p {
        color: var(--gray-400);
      }

      @media (min-width: 50em) {
        .box {
          border-radius: 1.5rem;
          padding: 2.5rem;
        }

        .skills {
          display: grid;
          grid-template-columns: repeat(3, 1fr);
          gap: 5rem;
        }

        .skills h2 {
          font-size: var(--text-2xl);
        }
      }
    </style>
  </div></BaseLayout
>
